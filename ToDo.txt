PENDIENTE
----------------------------------------
- Generar un fichero de prueba que tenga:
	-> Dos PaymentInstructions, uno FRST y otreo RCUR
	-> Que tenga transacciones normales, con cambio de cuanta en mismo banco, y cambios de cuenta en diferentes bancos
- Tomar el fichero .mdb del último envío y trabajarlo para que nos produzca una tabla o una consulta con los campos necesarios que requiera la aplicación que genere el SEPA XML
- Crear un programa de consola que lea ese query, genere los DirectDebitElementes y llame a 'GenerateISO20022CustomerDirectDebitInitiationFileMessage'

A REVISAR EN EL FICHERO FINAL COMPILADO EN EL ORDENADOR DE ESTEBAN
-------------------------------------------------------------------
- En los tests, para 8000 registros, en el peor momento necesitabamos aprox. 60 Mb. El fichero de salida en UTF-8 es de 6 Mb. ¿Funciona con ordenadores con poca memoria? (Ord. Esteban)?
	-> Probar a eliminar la clase 'BankAccount' y quedarnos con un simple 'string' que contenga el IBAN.
	-> Simplificar la clase DirectdebitMandate para que solo contenga un MandateID, la fecha de creación del mismo, y un 'string' con el IBAN.
	-> En el momento de inicializar la serializacion tenemos DOS copias completas de cada remesa en memoria:
		* Los DirectDebitElements: Un DirectDebitRemittance con su lista de DirectDebitPaymentInstrucions, cada una con su lista de DirectDebitTransations
		* Los objetos ISO20022 serializables: Un CustomerDirectDebitInitiationV02 con su array de PaymentInstructionInformation4 cada uno con un array de DirectDebitTransactionInformation9 
		Podemos probar a:
			* Destruir (set=nothing) el DirectDebitRemittance una vez creado el CustomerDirectdebitInitiationV02.
			* Ir destruyendo los DirectDebitElements a medida que vamos creando su equivalente ISO20022
	-> Si aún así no tira
		-> Crear paso a paso cada elemento DirectDebit, luego convertir a clase ISO20022, serializar a nodo XML, y añadir el nodo al XMLDocument, de esta manera:
			* Primero se crea la estructura basica: un Documento con un CustomerDirectDebitInitiation (y los datos de GroupHeader) los PaymentInstruction necesarios (y los datos de Payment Identification)
			* Luego se van añadiendo uno a uno los DirectDebitTransactions, añadiendo los nodos al documento XML
			* Las sumas de control se pueden poner desde el principio o dejar vacíos. ¡OJO! ¡Esto significa que no deben saltar las excepciones de las sumas de control!
	-> ¿Leer directamente de un DataSet e ir creando directamente las instancias de las clases serializables, pasando por alto todo el trabajo que hemos hecho con DirectDebitElements? Sería una putada...

OPCIONALES PARA TENER EN CUENTA:
----------------------------------------------------------------------------
- Unificar las excepciones. Todas las excepciones que se lanzan desde un constructor deberian ser TypeinitializationException (y dentro el subtipo - Argumento, ArgumentNull...-)
- Faltan por chequear algunos campos obligatorios en los constructores de DirectDebitTransactions y otros DDElements
- Al deserializar un PaymentStatusReport, hay que revisar los contenidos (que campos existen y sus valores), para diferenciar entre Devolucion y Rechazo

- ¿Hacer que todas las instanciaciones de objetos DirectDebitElements pasen a través de una clase o clases controladoras?
	-> Internamente:
		- SEPAMessagesManager usa:
			* DirectDebitRemittancesManager y PaymentStatusReportManager para acceder a las clases DirectDebitElements
			* SEPAElementsReader y SEPAElementsGenerator para acceder a las clases serializables de ISO20022
		- SEPAElementsGenerator y SEPAElementsReader deben usar DirectdebitRemittancesaManager y PaymentStatusReport? Quizá NO... Podria acceder directamente a las clases DirectDebit Elements
		- DirectDebitRemittancesManager tiene métodos para cerar y gestionar SOLO las clases principales:
			* DirectDebitTransaction
			* DirectDebitPaymentInstruction
			* DirectDebitRemittance
		- PaymentStatusReport tiene métodos para cerar y gestionar SOLO las clases principales:
			* DirectDebitTransactionReject
			* DirectDebitPaymentInstructionReject
			* PaymentStatusReport
	-> Externamente:
		- Con la estructura anterior sigue siendo necesario acceder directamente (sin pasar por 'Manager') a muchos elementos. ¿Cambiarlo?:
			 * 'Billing' (Debtor, SimplifiedBill...)
			 * 'DirectDebitElements' (BankAccount, DirectdebitInitiationContract, DirectdebitMandate)
		













	 
